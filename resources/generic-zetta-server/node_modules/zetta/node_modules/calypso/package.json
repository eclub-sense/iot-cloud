{
  "name": "calypso",
  "version": "0.3.0",
  "description": "A common query interface for data stores, featuring a SQL-like query language.",
  "main": "calypso.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "caql": ">=0.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "query",
    "orm"
  ],
  "author": {
    "name": "Kevin Swiber",
    "email": "kswiber@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/kevinswiber/calypso.git"
  },
  "bugs": {
    "url": "https://github.com/kevinswiber/calypso/issues"
  },
  "readme": "# calypso\n\n* Use a SQL-like query language over any queryable data store.\n* Automatically map query results to models.\n* Protect against SQL injection with prepared statements.\n* Create your own driver for your favorite database or web service!\n\n## Install\n\n`npm install calypso`\n\nYou'll also need a driver.  Available drivers:\n\n* MongoDB: https://github.com/kevinswiber/calypso-mongodb\n* Usergrid: https://github.com/kevinswiber/calypso-usergrid\n* LevelDB/LevelUP: https://github.com/kevinswiber/calypso-level\n* Memory: https://github.com/kevinswiber/calypso-memory\n\n## Usage\n\n```javascript\nvar calypso = require('calypso');\nvar Query = calypso.Query;\nvar UsergridDriver = require('calypso-usergrid');\n\nvar engine = calypso.configure({\n  driver: UsergridDriver.create({\n    orgName: 'kevinswiber',\n    appName: 'sandbox'\n  })\n});\n\nengine.build(function(err, connection) {\n  var session = connection.createSession();\n\n  var query = Query.of('books')\n    .ql('select title, author as writer where author=@author')\n    .params({ author: 'Stephen Hawking' });\n\n  session.find(query, function(err, books) {\n    console.log(books);\n  });\n});\n\n// Output:\n// [ { title: 'A Brief History of Time', writer: 'Stephen Hawking' } ]\n\n```\n\n### Query.of\n\nTakes a collection name or a constructor function that has been mapped.  (See: [Mappings](#mappings))\n\nReturns a Query instance.\n\n### Query#ql\n\nAccepts Calypso Query Language as a string.\n\n```javascript\nvar query = Query.of('books')\n  .ql('where title contains \"breakfast\"');\n```\n\n### Query#params\n\nAdd parameters to prepared statements.  Parameters will be properly escaped to prevent SQL injection attacks.\n\n```javascript\nvar query = Query.of('books')\n  .ql('where title contains @term')\n  .params({ term: 'breakfast' });\n```\n\n\n### Mappings\n\nConstructor functions can be assigned mappings.  Calypso will automatically instantiate the object when receiving query results.  Here's a quick Getting Started guide.\n\n1\\. Require dependencies.\n\n```javascript\nvar calypso = require('calypso');\nvar Query = calypso.Query;\nvar UsergridDriver = require('usergrid-calypso');\n```\n\n2\\. Set up a constructor function that assigns properties to instances.\n\n```javascript\nvar Book = function() {\n  this.title = null;\n  this.writer = null;\n};\n```\n\n3\\. Set up a mapping for the constructor.\n\n```javascript\nvar mapping = function(config) {\n  config\n    .of(Book)\n    .at('books')\n    .map('title')\n    .map('writer', { to: 'author' })\n};\n```\n\nNotice we're mapping Book#writer to the data store's author property.\n\n4\\. Configure a new Calypso engine.\n\n```javascript\nvar engine = calypso.configure({\n  driver: UsergridDriver.create({\n    orgName: 'kevinswiber',\n    appName: 'sandbox'\n  }),\n  mappings: [mapping]\n});\n```\n\n5\\. Query based on the JavaScript properties.\n\n```javascript\nengine.build(function(err, connection) {\n  var session = connection.createSession();\n\n  var query = Query.of(Book)\n    .ql('where writer=@writer')\n    .params({ writer: 'Stephen Hawking' });\n\n  session.find(query, function(err, books) {\n    console.log(books);\n  });\n});\n```\n\nOutput: `[ { title: 'A Brief History of Time', writer: 'Stephen Hawking' } ]`\n\n## Sessions\n\nSessions are created by drivers.  See the Usergrid Driver for more information: https://github.com/kevinswiber/calypso-usergrid\n\n### Session#find(query, callback)\n\nThis method returns an array of results.  It takes a query object and a callback in the form of `function(err, results)`.\n\n### Session#get(query, id, callback)\n\nThe query passed to this method is without fields or filters.\n\nExample:\n\n```javascript\nsession.get(Query.of(Book), 1234, function(err, book) {\n  console.log(book);\n});\n```\n\n## Repositories\n\nA repository can be used instead of sessions.  They provide similar functionality to sessions, except they are tied to a particular constructor.\n\nExample:\n\n```javascript\nvar calypso = require('calypso');\nvar Query = calypso.Query;\nvar RepositoryFactory = calypso.RepositoryFactory;\nvar UsergridDriver = require('calypso-usergrid');\n\nvar Book = function() {\n  this.title = null;\n  this.writer = null;\n};\n\nvar bookMapping = function(config) {\n  config\n    .of(Book)\n    .at('books')\n    .map('title')\n    .map('writer', { to: 'author' })\n};\n\nvar engine = calypso.configure({\n  driver: UsergridDriver.create({\n    orgName: 'kevinswiber',\n    appName: 'sandbox'\n  }),\n  mappings: [bookMapping]\n});\n\nengine.build(function(err, connection) {\n  var session = connection.createSession();\n\n  var factory = RepositoryFactory.create(session);\n\n  var bookRepository = factory.of(Book);\n\n  var id = 'd4d66224-f54e-11e2-9033-b1911fc0a0cc';\n\n  bookRepository.get(id, function(err, book) {\n    console.log(book);\n  });\n});\n\n```\n\nOutput: `[ { title: 'A Brief History of Time', writer: 'Stephen Hawking' } ]`\n\n## Calypso Query Language\n\nThe Calypso Query Language (CaQL) has support for field selection, field aliases, filters, and ordering.\n\nSee the full specification here: [Calypso Query Language Specification](https://github.com/kevinswiber/caql#calypso-query-language-specification)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "calypso@0.3.0",
  "_from": "calypso@^0.3.0"
}
