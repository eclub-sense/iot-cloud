{
  "name": "zetta-scout",
  "version": "0.5.0",
  "description": "A Scout class for Zetta.",
  "main": "scout.js",
  "dependencies": {
    "zetta-scientist": "^0.3.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zettajs/zetta-scout.git"
  },
  "keywords": [
    "zetta",
    "scout"
  ],
  "author": {
    "name": "Kevin Swiber",
    "email": "kswiber@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/zettajs/zetta-scout/issues"
  },
  "homepage": "https://github.com/zettajs/zetta-scout",
  "readme": "# zetta-scout\n\n## Installation\n\n```bash\n$ npm install zetta-scout --save\n```\n\n## Reference and Usage\n\n#### Class: Zetta.Scout\n\nThis is a class you inherit from when writing custom device drivers. Scouts are used to search for devices with external node modules, or protocols.\nIt's used by `require('zetta-scout');` or `require('zetta').Scout;`. You must inherit from the `Scout` class when building custom Zetta modules.\n\n```js\nvar util = require('util');\nvar Scout = require('zetta-scout');\n\nfunction MyScout(){\n  Scout.call(this);\n}\nutil.inherits(MyScout, Scout);\n```\n\n\n##### Method: Scout#init(func)\n\n* `func` Function\n\nThis method should be implemented by you. This allows you to initialize any resources like bluetooth access, serial ports, or\nvendor modules needed to look for devices. The argument `func` is provided, and must be called after scouting has started.\n\n```js\n\nMyScout.prototype.init = function(next) {\n  var connection = Serial.connect(function(){\n  });\n\n  connection.on('start', function(){\n    next();\n  });\n};\n\n```\n\n##### Method: Scout#discover(constructor, [arguments])\n\n* `constructor` Subclass of Device\n* `arguments` List of Objects\n\nThis method is called by you when you've found your device. The `constructor` argument should be a subclass of `Device`, and the second argument is a\nlist of objects to be used by the constructor.\n\n```js\nMyScout.prototype.init = function(next) {\n  this.discover(MyDevice, foo, bar, 'baz');\n};\n\n```\n\n\n\n##### Method: Scout#provision(deviceObject, constructor)\n\n* `deviceObject` Object\n* `constructor` Subclass of Device\n\nZetta will persist device data to an internal registry. Using an object retrieved from this registry you can initialize a device that Zetta already\nknows about. The first argument `deviceObject` is just data on the object from Zetta. The `constructor` argument is what will be created by Zetta.\n\n```js\nMyScout.prototype.init = function(next) {\n  var deviceObject = {\n    name:'testObject',\n    id: '123',\n    foo: 'bar'\n  };\n  this.provision(deviceObject, MyDevice);\n};\n```\n\n##### Property: Scout#server\n\nThis gives access to the zetta runtime. Here you can issue queries and lookup devices that Zetta already knows about.\n\n\n```js\nMyScout.prototype.init = function(next) {\n  var self = this;\n\n  // query registry for any device that has type led and an id that we know of.\n  var query = this.server.where({ type: 'lcd', id: 'some-id' });\n  this.server.find(query, function(err, results) {\n    if (results.length > 0) {\n      // found in registry, tell zetta it came online\n      self.provision(results[0], MyDevice, foo, bar, 'baz');\n    } else {\n      // does not exist in registry, discover a new one.\n      self.discover(MyDevice, foo, bar, 'baz');\n    }\n  });\n};\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "zetta-scout@0.5.0",
  "_from": "zetta-scout@^0.5.0"
}
