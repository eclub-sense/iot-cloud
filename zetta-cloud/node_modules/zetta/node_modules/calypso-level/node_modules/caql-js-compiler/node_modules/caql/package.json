{
  "name": "caql",
  "version": "0.2.0",
  "description": "Calypso Query Language",
  "main": "caql.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "generate": "jison caql.yy caql.l -o parser.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kevinswiber/caql.git"
  },
  "keywords": [
    "calypso",
    "query",
    "language",
    "sql"
  ],
  "author": {
    "name": "Kevin Swiber",
    "email": "kswiber@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kevinswiber/caql/issues"
  },
  "homepage": "https://github.com/kevinswiber/caql",
  "readme": "# Calypso Query Language (CaQL)\n\n* Use a SQL-like query language over any queryable data store.\n* Parser & AST provided.\n* Used by [calypso](https://github.com/kevinswiber/calypso) and other projects.\n\n## Install\n\n`npm install caql`\n\n\n## Calypso Query Language Specification\n\nThe Calypso Query Language (CaQL) has support for field selection, field aliases, filters, and ordering.\n\n### Field Selection\n\n#### select (optional)\n\n`select [fields | *]`\n\nSelect is optional.  If not provided, drivers should treat it as an unbounded field selection ('*').\n\n#### fields\n\nFields can contain letters, numbers, underscores, and hyphens.\n\nDeep field selections are allowed.\n\nExample: `select client.address.street1`\n\nFields can be escaped using brackets as delimiters.\n\nExample: `select [date of birth], age, name`\n\n#### aliases\n\nFields can also be aliased.\n\nExample: `select title as t, author as a`\n\n### Filter Expressions\n\n#### where\n\nStarts a filter.\n\nExample: `select title where author=\"Kurt Vonnegut\"`\n\n#### comparisons\n\nCaQL supports the following comparison expressions:\n\nEquality: `select * where name = \"Kevin\"`\n\nInequality: `select * where name != \"Rose\"`\n\nGreater than: `select * where age > 30`\n\nGreater than or equal to: `select * where age >= 30`\n\nLess than: `select * where price < 10`\n\nLess than or equal to: `select * where price <= 10`\n\nTo negate comparisons, use `NOT`:  `select * where not age > 30`\n\n\n#### missing\n\nUse CaQL to discover whether an object has a property.\n\nUndefined value: `select * where price is missing`\n\nDefined value: `select * where price is not missing`\n\n#### contains\n\n`select * where name contains \"Kevin\"`\n\n#### like\n\n`select * where name like \"%evi%\"`\n\nThe percent symbol (`%`) acts as a wildcard character matching zero or more characters.\n\nThe `like` operator can be negated with `not like`.\n\n`select * where name not like \"%evi%\"`\n\n#### location\n\nThe location expression supports a distance along with a latitude, longitude pair.\n\nExample: `select * where location within 30 of 90.2342, 30.23432`\n\nNote: Not all drivers may support this option.\n\n#### conjunctions\n\nCaQL has support for conjunctions using the keyword `and`.\n\nExample: `select * where name=\"Kevin\" and age=31`\n\n#### disjunctions\n\nCaQL has support for disjunctions, as well, using `or`.\n\nExample: `select * where name=\"Kevin\" or name=\"Matt\"`\n\n### Sorting\n\n#### order by\n\nResults can be sorted.  A direction can be added.  Ascending (`asc`) is used by default.  Descending (`desc`) must be explicit.\n\nExample: `select name, age order by age desc, name asc`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "caql@0.2.0",
  "_from": "caql@^0.2.0"
}
