{
  "name": "append-stream",
  "version": "1.2.2",
  "description": "An alternative to fs.createWriteStream. Don't handle backpressure, but it's faster and has some other features.",
  "main": "append-stream.js",
  "scripts": {
    "test": "tape test.js"
  },
  "keywords": [
    "append",
    "file"
  ],
  "author": {
    "name": "David Björklund",
    "email": "david.bjorklund@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "mkdirp": "^0.5.0",
    "rimraf": "^2.2.8",
    "tape": "^2.13.4"
  },
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/kesla/append-stream.git"
  },
  "bugs": {
    "url": "https://github.com/kesla/append-stream/issues"
  },
  "homepage": "https://github.com/kesla/append-stream",
  "readme": "# append-stream[![build status](https://secure.travis-ci.org/kesla/append-stream.svg)](http://travis-ci.org/kesla/append-stream)\n\n__sales pitch__: Sometimes all you want to do is to write to a file. And you want it to be simple. And fast. Oh, and perhaps open the file lazily. Well, than `append-stream` is the right choice for you!\n\n\n[![NPM](https://nodei.co/npm/append-stream.png?downloads&stars)](https://nodei.co/npm/append-stream/)\n\n[![NPM](https://nodei.co/npm-dl/append-stream.png)](https://nodei.co/npm/append-stream/)\n\n## Installation\n\n```\nnpm install append-stream\n```\n\n## Features\n\n### Comparsion to fs.createWriteStream()\n\n`append-stream` behaves similar to `fs.createWriteStream()` - but it has fewer features. Currently `append-stream` does not support:\n\n* .pipe()\n* backpressure\n* streams2-compability\n* writing data at some point past the beginning of the file\n* events\n\n### Buffering\n\nWhen a stream isn't avaible for write (e.g. when a write is active or the stream is getting opened), all subsequental writes will be buffered and then written to disk in a single write once the stream is available again. This explains the super fast times for writing concurrently, as shown in the benchmarks below.\n\n### Error handling\n\nIn `append-stream` a write() or end() you can only handle errors in the callback. This means that the below example there's no way to handle any potential error.\n\n```javascript\n\nvar stream = new AppendStream(filename)\n\nstream.write('beep')\nstream.write('boop')\nstream.end()\n\n```\n\n### lazy: true\n\nA feature that `append-stream` has is that you can configure it to lazily open (and thereby create) the file that's being appended to.\n\nThis means that the file will be opened the first time that you call `stream.write()`\n\n## Example\n\n### Input\n\n```javascript\nvar directory = __dirname + '/testdir/'\n  , filename = directory + 'beep-boop'\n  , AppendStream = require('./append-stream')\n\n  , stream\n\nrequire('rimraf').sync(directory)\nrequire('mkdirp').sync(directory)\n\nstream = new AppendStream(filename)\n\nstream.write('beep')\nstream.write('boop', function () {\n  require('fs').readFile(filename, 'utf8', function (err, content) {\n    console.log('written to file:')\n    console.log(content)\n\n    // you can also use append-stream as a factory\n    require('./append-stream')(filename + '2', function (err, stream) {\n      console.log('the stream is now opened and ready!')\n      // nice - you can end a stream!\n      stream.end(function () {\n        console.log('and now the stream has ended')\n        // lazy: true means that the file won't be opened (created) unless there's a write\n        require('./append-stream')(filename + '3', { lazy: true }, function (err, stream) {\n          stream.end(function () {\n            require('fs').exists(filename + '3', function (exists) {\n              console.log('Does this file exists (it should not)?', exists)\n            })\n          })\n        })\n      })\n    })\n  })\n})\n```\n\n### Output\n\n```\nwritten to file:\nbeepboop\nthe stream is now opened and ready!\nand now the stream has ended\nDoes this file exists (it should not)? false\n```\n\n## Benchmark\n\nRunning `node benchmark.js` on my Macbook Air (mid 2012) I get the following results:\n\n```\nwriting 100000 small Buffers in parallel\nAppendStream: 310ms\nWriteStream: 6836ms\nwriting 100000 small Buffers in series\nAppendStream: 1815ms\nWriteStream: 2066ms\n```\n\n## Licence\n\nCopyright (c) 2014 David Björklund\n\nThis software is released under the MIT license:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "_id": "append-stream@1.2.2",
  "_from": "append-stream@^1.1.0"
}
